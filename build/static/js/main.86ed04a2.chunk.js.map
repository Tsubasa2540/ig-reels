{"version":3,"sources":["VideoHeader.js","VideoFooter.js","VideoCard.js","App.js","serviceWorker.js","index.js"],"names":["VideoHeader","className","VideoFooter","channel","avatarSrc","song","likes","shares","Avatar","src","Button","VideoCard","url","useState","isVideoPlaying","setIsVideoPlaying","videoRef","useRef","ref","onClick","current","pause","play","alt","loop","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yWAeeA,MAVf,WACE,OACE,yBAAKC,UAAU,eACb,kBAAC,IAAD,MACA,qCACA,kBAAC,IAAD,Q,wBCKSC,MAXf,YAAiE,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,UAC7B,OAD8D,EAAtBC,KAAsB,EAAhBC,MAAgB,EAATC,OAEnD,yBAAKN,UAAU,eACb,yBAAKA,UAAU,qBACb,kBAACO,EAAA,EAAD,CAAQC,IAAKL,IACb,4BAAKD,EAAL,WAAgB,kBAACO,EAAA,EAAD,mBCuBTC,MA3Bf,YAAoE,IAAhDR,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,KAAMO,EAAqB,EAArBA,IAAKN,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,OAAS,EACnBM,oBAAS,GADU,mBACzDC,EADyD,KACzCC,EADyC,KAE3DC,EAAWC,iBAAO,MAUxB,OACE,yBAAKhB,UAAU,aACb,kBAAC,EAAD,MACA,2BAAOiB,IAAKF,EAAUG,QAZL,WACfL,GACFE,EAASI,QAAQC,QACjBN,GAAkB,KAElBC,EAASI,QAAQE,OACjBP,GAAkB,KAM2Bd,UAAU,oBAAoBQ,IAAKG,EAAKW,IAAI,gBAAgBC,MAAM,IAC/G,kBAAC,EAAD,CACArB,QAASA,EACTC,UAAWA,EACXC,KAAMA,EACNC,MAAOA,EACPC,OAAQA,MCECkB,MAxBf,WACE,OAEE,yBAAKxB,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKQ,IAAI,wGAAwGc,IAAI,GAAGtB,UAAU,cAClI,sCAGF,yBAAKA,UAAU,eACb,kBAAC,EAAD,CACEE,QAAQ,UACRC,UAAU,SACVC,KAAK,SACLO,IAAI,6CACJN,MAAO,IACPC,OAAQ,KAEV,kBAAC,EAAD,SCVYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.86ed04a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './VideoHeader.css'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport CameraAltIcon from '@material-ui/icons/CameraAlt'\r\n\r\nfunction VideoHeader() {\r\n  return (\r\n    <div className='videoHeader'>\r\n      <ArrowBackIosIcon />\r\n      <h3>Reels</h3>\r\n      <CameraAltIcon />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoHeader\r\n","import React from 'react'\r\nimport './VideoFooter.css'\r\nimport { Button, Avatar } from '@material-ui/core'\r\n\r\nfunction VideoFooter({channel, avatarSrc, song, likes, shares}) {\r\n  return (\r\n    <div className='videoFooter'>\r\n      <div className=\"videoFooter__text\">\r\n        <Avatar src={avatarSrc} />\r\n        <h5>{channel} â€¢ <Button>Follow</Button></h5>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoFooter\r\n","import React, { useState, useRef } from 'react'\r\nimport './VideoCard.css'\r\nimport VideoHeader from './VideoHeader'\r\nimport VideoFooter from './VideoFooter'\r\n\r\nfunction VideoCard({channel, avatarSrc, song, url, likes, shares}) {\r\n  const [ isVideoPlaying, setIsVideoPlaying ] = useState(false) \r\n  const videoRef = useRef(null)\r\n  const onVideoPress = () => {\r\n    if (isVideoPlaying) {\r\n      videoRef.current.pause()\r\n      setIsVideoPlaying(false)\r\n    } else {\r\n      videoRef.current.play()\r\n      setIsVideoPlaying(true)\r\n    }\r\n  }\r\n  return (\r\n    <div className='videoCard'>\r\n      <VideoHeader />\r\n      <video ref={videoRef} onClick={onVideoPress} className='videoCard__player' src={url} alt='IG reel video' loop={true}/>\r\n      <VideoFooter \r\n      channel={channel}\r\n      avatarSrc={avatarSrc}\r\n      song={song}\r\n      likes={likes}\r\n      shares={shares}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoCard\r\n","import React from 'react';\nimport './App.css';\nimport VideoCard from './VideoCard';\n\nfunction App() {\n  return (\n    //BEM naming convention\n    <div className=\"app\">\n      <div className=\"app__top\">\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Instagram_icon.png/768px-Instagram_icon.png\" alt=\"\" className=\"app__logo\"/>\n        <h1>Reels</h1>\n\n      </div>\n      <div className=\"app__videos\">\n        <VideoCard \n          channel=\"Channel\"\n          avatarSrc='me.jpg'\n          song='songOK'\n          url='mixkit-woman-in-an-amusement-park-2818.mp4'\n          likes={103}\n          shares={40}\n        />\n        <VideoCard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}